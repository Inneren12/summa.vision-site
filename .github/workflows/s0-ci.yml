name: S0 Code-only Quality Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: s0-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  s0:
    name: S0 checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # PR-гейт: не пропускаем BIN в code-only PR
      - name: Ensure no BIN files in PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const exts = ['.png','.jpg','.jpeg','.svg','.ico','.webp','.avif','.gif','.woff','.woff2','.ttf','.otf','.pdf','.zip'];
            const pr = context.payload.pull_request;
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              per_page: 200
            });
            const bin = files.data.filter(f => exts.some(e => f.filename.toLowerCase().endsWith(e)));
            if (bin.length) {
              core.setFailed("S0 (code-only): PR содержит бинарники:\n" + bin.map(b => ` - ${b.filename}`).join('\n'));
            }

      - name: Debug: print workflow SHA and file used
        run: |
          echo "Workflow commit SHA: $GITHUB_SHA"
          echo "::group::.github/workflows/s0-ci.yml"
          nl -ba .github/workflows/s0-ci.yml
          echo "::endgroup::"

      # 1) Node без кэша (чтобы не трогать pnpm до активации)
      - name: Setup Node (no cache yet)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 2) Corepack + pnpm (активация до шага с кэшем)
      - name: Enable Corepack + PNPM
        run: |
          corepack enable
          corepack prepare pnpm@9.12.3 --activate
          pnpm -v

      # 3) Кэш pnpm только если есть pnpm-lock.yaml
      - name: Setup Node cache for pnpm (only if pnpm-lock.yaml exists)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps (pnpm if lockfile, otherwise npm; skip if no package.json)
        run: |
          set -e
          if [ -f pnpm-lock.yaml ]; then
            echo "Using pnpm (lockfile found)"
            pnpm i --frozen-lockfile
          elif [ -f package-lock.json ]; then
            echo "Using npm ci (package-lock.json found)"
            npm ci
          elif [ -f package.json ]; then
            echo "Using npm i (package.json found)"
            npm i
          else
            echo "No package.json found; skipping install."
          fi

      - name: Verify token source exists
        run: |
          test -f tokens/brand.tokens.json || { echo "::error::missing tokens/brand.tokens.json"; exit 1; }
          echo "Found tokens/brand.tokens.json"

      - name: Build tokens (CSS variables + TS export)
        run: |
          set -e
          # 1) если есть скрипт в package.json
          if [ -f package.json ] && npm run -s tokens:build >/dev/null 2>&1; then
            npm run -s tokens:build
            echo "tokens:build OK (package script)"
          # 2) резерв — прямой вызов tsx-скрипта
          elif [ -f scripts/build-tokens.ts ]; then
            npx -y tsx scripts/build-tokens.ts
            echo "tokens:build OK (direct tsx)"
          else
            echo "::error::No tokens builder found (add scripts/build-tokens.ts or a tokens:build script)"; exit 1
          fi
          # Проверим артефакты
          test -f styles/tokens.css || { echo "::error::styles/tokens.css not generated"; exit 1; }
          test -f src/shared/theme/tokens.ts || { echo "::error::src/shared/theme/tokens.ts not generated"; exit 1; }

      - name: No raw colors outside tokens
        shell: bash
        run: |
          set -euo pipefail
          PATTERN='#[0-9A-Fa-f]{3,8}\b'

          # Собираем кодовые корни
          dirs=()
          for d in src app styles og; do [ -d "$d" ] && dirs+=("$d"); done
          if [ ${#dirs[@]} -eq 0 ]; then
            echo "No code directories found (src/app/styles/og); skipping raw color scan."
            exit 0
          fi

          # Соберём список файлов через find, исключая:
          # - каталоги: node_modules, .next, dist, tokens, .storybook, и src/shared/theme/*
          # - файл: styles/tokens.css (сгенерированный)
          mapfile -t FILES < <(
            find "${dirs[@]}" \
              -type d \( -name node_modules -o -name .next -o -name dist -o -name tokens -o -name .storybook -o -path '*/src/shared/theme' \) -prune -o \
              -type f \( -name '*.ts' -o -name '*.tsx' -o -name '*.js' -o -name '*.jsx' -o -name '*.css' -o -name '*.html' \) \
              ! -path '*/styles/tokens.css' \
              -print
          )

          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No eligible files to scan."
            exit 0
          fi

          # Ищем «сырые» HEX
          > /tmp/raw_colors.txt
          grep -nE "$PATTERN" "${FILES[@]}" > /tmp/raw_colors.txt || true
          # гарантированно исключаем артефакты токенов, даже если find всё-таки их добавил
          sed -i '/\/src\/shared\/theme\/tokens\.ts:/d' /tmp/raw_colors.txt
          sed -i '/\/styles\/tokens\.css:/d' /tmp/raw_colors.txt

          if [ -s /tmp/raw_colors.txt ]; then
            echo "### Raw color references found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            sed 's/\x1b\[[0-9;]*m//g' /tmp/raw_colors.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            echo "::group::Raw color references (file:line:match)"
            cat /tmp/raw_colors.txt
            echo "::endgroup::"

            echo "::error::Found raw HEX colors outside tokens (see summary for details)."
            exit 1
          else
            echo "OK: no raw colors"
          fi

      - name: Contrast sanity for core pairs
        run: |
          node - <<'NODE'
          const fs = require('fs');

          // ---- load tokens ----
          const TOK = JSON.parse(fs.readFileSync('tokens/brand.tokens.json','utf8'));

          // ---- helpers ----
          const get = (obj, path) => path.split('.').reduce((o,k)=> (o && k in o ? o[k] : undefined), obj);

          const rgbToHex = (r,g,b)=> '#'+[r,g,b].map(n=>{
            n = Math.max(0, Math.min(255, Math.round(n)));
            return n.toString(16).padStart(2,'0');
          }).join('');

          const parseCssRgb = s => {
            const m = s.match(/^rgba?\(([^)]+)\)/i);
            if(!m) return null;
            const parts = m[1].split(',').map(x=>x.trim());
            if(parts.length < 3) return null;
            return rgbToHex(+parts[0], +parts[1], +parts[2]);
          };

          function normalizeColor(val, depth=0) {
            if (depth > 6 || val == null) return null;

            // strings
            if (typeof val === 'string') {
              const ali = val.match(/^\{([^}]+)\}$/);             // "{path.to.token}"
              if (ali) return normalizeColor(get(TOK, ali[1]), depth+1);
              if (/^#?[0-9a-fA-F]{3,8}$/.test(val)) {
                let s = val.startsWith('#') ? val : '#'+val;
                if (s.length === 4) s = '#'+s[1]+s[1]+s[2]+s[2]+s[3]+s[3];
                return s.toUpperCase();
              }
              if (/^rgba?\(/i.test(val)) {
                const hex = parseCssRgb(val);
                return hex ? hex.toUpperCase() : null;
              }
              return null;
            }

            // arrays [r,g,b]
            if (Array.isArray(val) && val.length >= 3 && val.every(n => typeof n === 'number')) {
              return rgbToHex(val[0], val[1], val[2]).toUpperCase();
            }

            // objects
            if (typeof val === 'object') {
              if ('value'   in val) return normalizeColor(val.value,   depth+1);
              if ('$value'  in val) return normalizeColor(val.$value,  depth+1);
              if ('hex'     in val) return normalizeColor(val.hex,     depth+1);
              if ('r' in val && 'g' in val && 'b' in val) return rgbToHex(val.r,val.g,val.b).toUpperCase();
              if ('light'   in val) return normalizeColor(val.light,   depth+1);
              if ('default' in val) return normalizeColor(val.default, depth+1);
            }
            return null;
          }

          function srgb2lin(u){u/=255; return u<=0.04045?u/12.92:Math.pow((u+0.055)/1.055,2.4)}
          function luminance(hex){
            const n=parseInt(hex.replace('#',''),16);
            const R=srgb2lin((n>>16)&255), G=srgb2lin((n>>8)&255), B=srgb2lin(n&255);
            return 0.2126*R + 0.7152*G + 0.0722*B;
          }
          function contrast(a,b){
            const L1=luminance(a), L2=luminance(b);
            const [hi,lo]=L1>L2 ? [L1,L2] : [L2,L1];
            return (hi+0.05)/(lo+0.05);
          }

          // Базовые пары для sanity-check
          const PAIRS = [
            ['color.fg.default','color.bg.canvas'],
            ['color.fg.default','color.bg.surface'],
            ['color.fg.inverse','color.brand.blue.500']
          ];

          let ok = true;
          for (const [fgP, bgP] of PAIRS) {
            const fg = normalizeColor(get(TOK, fgP));
            const bg = normalizeColor(get(TOK, bgP));
            if (!fg || !bg) {
              console.log(`::warning::Cannot resolve color tokens for pair: ${fgP} on ${bgP} (fg=${fg}, bg=${bg})`);
              continue; // предупреждение, но не падение
            }
            const ratio = contrast(fg, bg);
            console.log(`${fgP} (${fg}) ON ${bgP} (${bg}) = ${ratio.toFixed(2)}:1`);
            if (ratio < 4.5) {
              console.log(`::error::Contrast < 4.5 (${ratio.toFixed(2)}) for ${fgP} on ${bgP}`);
              ok = false;
            }
          }
          if (!ok) process.exit(1);
          NODE

      - name: Axe on OG templates (if present)
        if: ${{ hashFiles('og/templates/*.html') != '' }}
        run: |
          npx -y @axe-core/cli -q og/templates/*.html

      - name: Build Storybook (optional if configured)
        if: ${{ hashFiles('.storybook/**') != '' }}
        run: |
          npx -y storybook@latest build --quiet
