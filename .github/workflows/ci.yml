name: CI
on:
  push: { branches: ["*"] }
  pull_request: { branches: ["*"] }
jobs:
  sentinel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure no auto-install actions
        run: |
          set -e
          if git grep -n "bahmutov/npm-install" -- .github/workflows; then
            echo "::error::Remove bahmutov/npm-install from workflows — it forces 'npm ci' before lock sync"
            exit 1
          fi

  build-test:
    runs-on: ubuntu-latest
    needs: [sentinel]
    env:
      HUSKY: "0"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      # 1) Синхронизируем lock с package.json (без запуска скриптов)
      - name: Sync lockfile (no scripts)
        run: npm install --package-lock-only --no-audit --no-fund --ignore-scripts

      # 2) Строгая установка без lifecycle-скриптов; fallback на install
      - name: Clean install (ci, ignore scripts)
        run: npm ci --no-audit --no-fund --ignore-scripts || npm install --no-audit --no-fund --ignore-scripts

      # 3) Явно запускаем postinstall-патч Next, если он есть
      - name: Postinstall (manual Next patch)
        run: |
          if [ -f scripts/patch-next.cjs ]; then node scripts/patch-next.cjs; fi

      - name: Lint
        run: npm run lint || true

      - name: Typecheck
        run: npm run typecheck || true

      - name: Unit / Coverage
        run: npm run test:ci || npm test

      - name: Static analysis (knip + madge)
        run: npm run quality:check

      - name: Performance budgets (size-limit + Lighthouse)
        run: npm run perf:check
